        -:    0:Source:util.c
        -:    0:Graph:util.gcno
        -:    0:Data:util.gcda
        -:    0:Runs:389
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <ctype.h>
        -:    4:#include <errno.h>
        -:    5:#include <string.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <stdarg.h>
        -:    8:
        -:    9:#include "memcached.h"
        -:   10:
        -:   11:static char *uriencode_map[256];
        -:   12:static char uriencode_str[768];
        -:   13:
      112:   14:void uriencode_init(void) {
        -:   15:    int x;
      112:   16:    char *str = uriencode_str;
    28784:   17:    for (x = 0; x < 256; x++) {
    28672:   18:        if (isalnum(x) || x == '-' || x == '.' || x == '_' || x == '~') {
     7392:   19:            uriencode_map[x] = NULL;
        -:   20:        } else {
    42560:   21:            snprintf(str, 4, "%%%02hhX", (unsigned char)x);
    21280:   22:            uriencode_map[x] = str;
    21280:   23:            str += 3; /* lobbing off the \0 is fine */
        -:   24:        }
        -:   25:    }
      112:   26:}
        -:   27:
   147646:   28:bool uriencode(const char *src, char *dst, const size_t srclen, const size_t dstlen) {
        -:   29:    int x;
   147646:   30:    size_t d = 0;
 13816844:   31:    for (x = 0; x < srclen; x++) {
 13669198:   32:        if (d + 4 > dstlen)
        -:   33:            return false;
 13669198:   34:        if (uriencode_map[(unsigned char) src[x]] != NULL) {
    17930:   35:            memcpy(&dst[d], uriencode_map[(unsigned char) src[x]], 3);
     8965:   36:            d += 3;
        -:   37:        } else {
 13660233:   38:            dst[d] = src[x];
 13660233:   39:            d++;
        -:   40:        }
        -:   41:    }
   147646:   42:    dst[d] = '\0';
   147646:   43:    return true;
        -:   44:}
        -:   45:
        -:   46:/* Avoid warnings on solaris, where isspace() is an index into an array, and gcc uses signed chars */
        -:   47:#define xisspace(c) isspace((unsigned char)c)
        -:   48:
      644:   49:bool safe_strtoull(const char *str, uint64_t *out) {
      644:   50:    assert(out != NULL);
      644:   51:    errno = 0;
      644:   52:    *out = 0;
        -:   53:    char *endptr;
      644:   54:    unsigned long long ull = strtoull(str, &endptr, 10);
      644:   55:    if ((errno == ERANGE) || (str == endptr)) {
        -:   56:        return false;
        -:   57:    }
        -:   58:
      639:   59:    if (xisspace(*endptr) || (*endptr == '\0' && endptr != str)) {
      639:   60:        if ((long long) ull < 0) {
        -:   61:            /* only check for negative signs in the uncommon case when
        -:   62:             * the unsigned number is so big that it's negative as a
        -:   63:             * signed number. */
        6:   64:            if (strchr(str, '-') != NULL) {
        -:   65:                return false;
        -:   66:            }
        -:   67:        }
      639:   68:        *out = ull;
      639:   69:        return true;
        -:   70:    }
        -:   71:    return false;
        -:   72:}
        -:   73:
        -:   74:/* Could macro this. Decided to keep this unrolled for safety rather than add
        -:   75: * the base parameter to all callers. Very few places need to parse a number
        -:   76: * outside of base 10, currently exactly once, so splitting this up should
        -:   77: * help avoid typo bugs.
        -:   78: */
        1:   79:bool safe_strtoull_hex(const char *str, uint64_t *out) {
        1:   80:    assert(out != NULL);
        1:   81:    errno = 0;
        1:   82:    *out = 0;
        -:   83:    char *endptr;
        1:   84:    unsigned long long ull = strtoull(str, &endptr, 16);
        1:   85:    if ((errno == ERANGE) || (str == endptr)) {
        -:   86:        return false;
        -:   87:    }
        -:   88:
        1:   89:    if (xisspace(*endptr) || (*endptr == '\0' && endptr != str)) {
        1:   90:        if ((long long) ull < 0) {
        -:   91:            /* only check for negative signs in the uncommon case when
        -:   92:             * the unsigned number is so big that it's negative as a
        -:   93:             * signed number. */
    #####:   94:            if (strchr(str, '-') != NULL) {
        -:   95:                return false;
        -:   96:            }
        -:   97:        }
        1:   98:        *out = ull;
        1:   99:        return true;
        -:  100:    }
        -:  101:    return false;
        -:  102:}
        -:  103:
        3:  104:bool safe_strtoll(const char *str, int64_t *out) {
        3:  105:    assert(out != NULL);
        3:  106:    errno = 0;
        3:  107:    *out = 0;
        -:  108:    char *endptr;
        3:  109:    long long ll = strtoll(str, &endptr, 10);
        3:  110:    if ((errno == ERANGE) || (str == endptr)) {
        -:  111:        return false;
        -:  112:    }
        -:  113:
        3:  114:    if (xisspace(*endptr) || (*endptr == '\0' && endptr != str)) {
        3:  115:        *out = ll;
        3:  116:        return true;
        -:  117:    }
        -:  118:    return false;
        -:  119:}
        -:  120:
   301627:  121:bool safe_strtoul(const char *str, uint32_t *out) {
   301627:  122:    char *endptr = NULL;
   301627:  123:    unsigned long l = 0;
   301627:  124:    assert(out);
   301627:  125:    assert(str);
   301627:  126:    *out = 0;
   301627:  127:    errno = 0;
        -:  128:
   301627:  129:    l = strtoul(str, &endptr, 10);
   301627:  130:    if ((errno == ERANGE) || (str == endptr)) {
        -:  131:        return false;
        -:  132:    }
        -:  133:
   301624:  134:    if (xisspace(*endptr) || (*endptr == '\0' && endptr != str)) {
   301624:  135:        if ((long) l < 0) {
        -:  136:            /* only check for negative signs in the uncommon case when
        -:  137:             * the unsigned number is so big that it's negative as a
        -:  138:             * signed number. */
    #####:  139:            if (strchr(str, '-') != NULL) {
        -:  140:                return false;
        -:  141:            }
        -:  142:        }
   301624:  143:        *out = l;
   301624:  144:        return true;
        -:  145:    }
        -:  146:
        -:  147:    return false;
        -:  148:}
        -:  149:
   605307:  150:bool safe_strtol(const char *str, int32_t *out) {
   605307:  151:    assert(out != NULL);
   605307:  152:    errno = 0;
   605307:  153:    *out = 0;
        -:  154:    char *endptr;
   605307:  155:    long l = strtol(str, &endptr, 10);
   605307:  156:    if ((errno == ERANGE) || (str == endptr)) {
        -:  157:        return false;
        -:  158:    }
        -:  159:
   605303:  160:    if (xisspace(*endptr) || (*endptr == '\0' && endptr != str)) {
   605303:  161:        *out = l;
   605303:  162:        return true;
        -:  163:    }
        -:  164:    return false;
        -:  165:}
        -:  166:
        9:  167:bool safe_strtod(const char *str, double *out) {
        9:  168:    assert(out != NULL);
        9:  169:    errno = 0;
        9:  170:    *out = 0;
        -:  171:    char *endptr;
        9:  172:    double d = strtod(str, &endptr);
        9:  173:    if ((errno == ERANGE) || (str == endptr)) {
        -:  174:        return false;
        -:  175:    }
        -:  176:
        9:  177:    if (xisspace(*endptr) || (*endptr == '\0' && endptr != str)) {
        9:  178:        *out = d;
        9:  179:        return true;
        -:  180:    }
        -:  181:    return false;
        -:  182:}
        -:  183:
        -:  184:// slow, safe function for copying null terminated buffers.
        -:  185:// ensures null terminator set on destination buffer. copies at most dstmax-1
        -:  186:// non-null bytes.
        -:  187:// Explicitly avoids over-reading src while looking for the null byte.
        -:  188:// returns true if src was fully copied.
        -:  189:// returns false if src was truncated into dst.
        2:  190:bool safe_strcpy(char *dst, const char *src, const size_t dstmax) {
        -:  191:   size_t x;
        -:  192:
       10:  193:   for (x = 0; x < dstmax - 1 && src[x] != '\0'; x++) {
        8:  194:        dst[x] = src[x];
        -:  195:   }
        -:  196:
        2:  197:   dst[x] = '\0';
        -:  198:
        2:  199:   if (src[x] == '\0') {
        -:  200:       return true;
        -:  201:   } else {
    #####:  202:       return false;
        -:  203:   }
        -:  204:}
        -:  205:
        6:  206:bool safe_memcmp(const void *a, const void *b, size_t len) {
        6:  207:    const volatile unsigned char *ua = (const volatile unsigned char *)a;
        6:  208:    const volatile unsigned char *ub = (const volatile unsigned char *)b;
        6:  209:    int delta = 0;
        -:  210:    size_t x;
        -:  211:
       27:  212:    for (x = 0; x < len; x++) {
       21:  213:        delta |= ua[x] ^ ub[x];
        -:  214:    }
        -:  215:
        6:  216:    if (delta == 0) {
        -:  217:        return true;
        -:  218:    } else {
        1:  219:        return false;
        -:  220:    }
        -:  221:}
        -:  222:
        2:  223:void vperror(const char *fmt, ...) {
        2:  224:    int old_errno = errno;
        -:  225:    char buf[1024];
        -:  226:    va_list ap;
        -:  227:
        2:  228:    va_start(ap, fmt);
        2:  229:    if (vsnprintf(buf, sizeof(buf), fmt, ap) == -1) {
    #####:  230:        buf[sizeof(buf) - 1] = '\0';
        -:  231:    }
        2:  232:    va_end(ap);
        -:  233:
        2:  234:    errno = old_errno;
        -:  235:
        2:  236:    perror(buf);
        2:  237:}
        -:  238:
        -:  239:#ifndef HAVE_HTONLL
        -:  240:static uint64_t mc_swap64(uint64_t in) {
        -:  241:#ifdef ENDIAN_LITTLE
        -:  242:    /* Little endian, flip the bytes around until someone makes a faster/better
        -:  243:    * way to do this. */
    58669:  244:    int64_t rv = 0;
    58669:  245:    int i = 0;
   528021:  246:     for(i = 0; i<8; i++) {
   469352:  247:        rv = (rv << 8) | (in & 0xff);
   469352:  248:        in >>= 8;
        -:  249:     }
    58669:  250:    return rv;
        -:  251:#else
        -:  252:    /* big-endian machines don't need byte swapping */
        -:  253:    return in;
        -:  254:#endif
        -:  255:}
        -:  256:
    38827:  257:uint64_t ntohll(uint64_t val) {
    38827:  258:   return mc_swap64(val);
        -:  259:}
        -:  260:
    19842:  261:uint64_t htonll(uint64_t val) {
    19842:  262:   return mc_swap64(val);
        -:  263:}
        -:  264:#endif
        -:  265:
